---
- name: Manage Web server pod tasks
  hosts: web_server
  become: yes
  vars:
    app_dir: /var/www/html
    backup_dir: /backups
    mysql_db_name: production_db
    mysql_user: db_user
    mysql_password: db_pass
    backup_file: "{{ backup_dir }}/mysql_backup_{{ ansible_date_time.date }}.sql"

  tasks:
    - name: Ensure kubectl is installed
      ansible.builtin.package:
        name: kubectl
        state: present

    - name: Get Web server pod name
      ansible.builtin.command:
        cmd: kubectl get pods -l app=web-server -o jsonpath='{.items[0].metadata.name}'
      register: pod_name
      changed_when: false

    - name: Check for local git changes
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- git -C {{ app_dir }} status --porcelain
      register: git_status
      changed_when: false

    - name: Fail if local changes exist
      ansible.builtin.fail:
        msg: "Local changes detected in git repository. Please commit or stash changes before pulling."
      when: git_status.stdout | length > 0

    - name: Run git pull
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- git -C {{ app_dir }} pull
      register: git_pull
      changed_when: "'Already up to date' not in git_pull.stdout"

    - name: Run Composer install
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- composer install --no-dev --optimize-autoloader
        chdir: {{ app_dir }}
      register: composer_install
      changed_when: composer_install.rc == 0

    - name: Run npm install and build
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- npm install && npm run build
        chdir: {{ app_dir }}
      register: npm_build
      changed_when: npm_build.rc == 0

    - name: Ensure test environment uses SQLite
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- sh -c "echo 'DB_CONNECTION=sqlite' >> {{ app_dir }}/.env.testing && echo 'DB_DATABASE={{ app_dir }}/database/test.sqlite' >> {{ app_dir }}/.env.testing"
      changed_when: false

    - name: Create SQLite test database file
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- touch {{ app_dir }}/database/test.sqlite
      changed_when: false

    - name: Run tests with SQLite
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- php {{ app_dir }}/artisan test --env=testing
      register: test_result
      changed_when: false
      failed_when: test_result.rc != 0

    - name: Ensure backup directory exists
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- mkdir -p {{ backup_dir }}
      changed_when: false

    - name: Backup MySQL production database
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- mysqldump -u {{ mysql_user }} -p{{ mysql_password }} {{ mysql_db_name }} > {{ backup_file }}
      changed_when: true

    - name: Compress backup file
      ansible.builtin.command:
        cmd: kubectl exec {{ pod_name.stdout }} -- gzip {{ backup_file }}
      changed_when: true